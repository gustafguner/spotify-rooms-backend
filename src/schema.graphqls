schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  user(query: String): User
  room(roomId: ID!): Room
  rooms: [Room]
  playback(roomId: ID!): Track
  queue(roomId: ID!): [Track]
  usersInRoom(roomId: ID!): [User]
}

type Mutation {
  createRoom(input: CreateRoomInput!): Room
  addTrackToQueue(input: AddTrackToQueueInput!): Track!
  voteForTrack(input: VoteForTrackInput!): Boolean!
  enterRoom(roomId: ID!): Boolean!
  leaveRoom(roomId: ID!): Boolean!
}

type Subscription {
  trackAddedToQueue(roomId: ID!): Track
  trackVotedOnInQueue(roomId: ID!): Track
  trackRemovedFromQueue(roomId: ID!): Track
  playback(roomId: ID!): Track
  userEnteredRoom(roomId: ID!): User
  userLeftRoom(roomId: ID!): User
}

type User {
  id: ID!
  spotifyId: String
  accessToken: String
  refreshToken: String
  expires: Int
  displayName: String
  email: String
  country: String
  image: String
}

type Room {
  id: ID!
  name: String!
  host: User!
  users: [User]
  playback: Track
  queue: [Track]
}

type Track {
  id: String
  uri: String
  name: String
  artists: [Artist]
  images: [SpotifyImage]
  voters: [User]
  queueTimestamp: String
  playTimestamp: String
  position: Int
  duration: Int
}

type Artist {
  id: String
  name: String
}

type SpotifyImage {
  url: String
  width: Int
  height: Int
}

input CreateRoomInput {
  name: String!
  mode: String!
  private: Boolean!
}

input AddTrackToQueueInput {
  roomId: ID!
  trackId: String!
}

input VoteForTrackInput {
  roomId: ID!
  trackId: String!
}

input PlayTrackInput {
  roomId: ID!
}
