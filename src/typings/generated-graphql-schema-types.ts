/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  user?: User;
  room?: Room;
  rooms?: Array<Room | null>;
}

export interface User {
  id: string;
  spotifyId?: string;
  displayName?: string;
  email?: string;
  country?: string;
}

export interface Room {
  id: string;
  name: string;
  host: User;
  users?: Array<User | null>;
  playback?: Playback;
}

export interface Playback {
  isPlaying?: boolean;
  uri?: string;
  name?: string;
  artists?: Array<Artist | null>;
  images?: Array<SpotifyImage | null>;
}

export interface Artist {
  name?: string;
}

export interface SpotifyImage {
  url?: string;
  width?: number;
  height?: number;
}

export interface Mutation {
  createRoom: boolean;
}

export interface CreateRoomInput {
  name: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  User?: UserTypeResolver;
  Room?: RoomTypeResolver;
  Playback?: PlaybackTypeResolver;
  Artist?: ArtistTypeResolver;
  SpotifyImage?: SpotifyImageTypeResolver;
  Mutation?: MutationTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  user?: QueryToUserResolver<TParent>;
  room?: QueryToRoomResolver<TParent>;
  rooms?: QueryToRoomsResolver<TParent>;
}

export interface QueryToUserArgs {
  query?: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRoomArgs {
  query: string;
}
export interface QueryToRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRoomsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  spotifyId?: UserToSpotifyIdResolver<TParent>;
  displayName?: UserToDisplayNameResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  country?: UserToCountryResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSpotifyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTypeResolver<TParent = any> {
  id?: RoomToIdResolver<TParent>;
  name?: RoomToNameResolver<TParent>;
  host?: RoomToHostResolver<TParent>;
  users?: RoomToUsersResolver<TParent>;
  playback?: RoomToPlaybackResolver<TParent>;
}

export interface RoomToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToPlaybackResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaybackTypeResolver<TParent = any> {
  isPlaying?: PlaybackToIsPlayingResolver<TParent>;
  uri?: PlaybackToUriResolver<TParent>;
  name?: PlaybackToNameResolver<TParent>;
  artists?: PlaybackToArtistsResolver<TParent>;
  images?: PlaybackToImagesResolver<TParent>;
}

export interface PlaybackToIsPlayingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaybackToUriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaybackToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaybackToArtistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaybackToImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArtistTypeResolver<TParent = any> {
  name?: ArtistToNameResolver<TParent>;
}

export interface ArtistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SpotifyImageTypeResolver<TParent = any> {
  url?: SpotifyImageToUrlResolver<TParent>;
  width?: SpotifyImageToWidthResolver<TParent>;
  height?: SpotifyImageToHeightResolver<TParent>;
}

export interface SpotifyImageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SpotifyImageToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SpotifyImageToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  createRoom?: MutationToCreateRoomResolver<TParent>;
}

export interface MutationToCreateRoomArgs {
  input: CreateRoomInput;
}
export interface MutationToCreateRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
